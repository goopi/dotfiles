" vimrc
" Author: Gustavo Leguizamon (@goopi)

set nocompatible

" needed for vundle, will be turned on after vundle inits
filetype off

runtime macros/matchit.vim

" setup vundle
set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                             Vundle configuration                            "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

Bundle 'Align'
Bundle 'closetag.vim'
Bundle 'digitaltoad/vim-jade'
Bundle 'epmatsw/ag.vim'
Bundle 'gmarik/vundle'
Bundle 'goldfeld/vim-seek'
Bundle 'Indent-Guides'
Bundle 'IndexedSearch'
Bundle 'kien/ctrlp.vim'
Bundle 'leshill/vim-json'
Bundle 'Lokaltog/vim-easymotion'
Bundle 'Lokaltog/vim-powerline'
Bundle 'mattn/zencoding-vim'
Bundle 'othree/html5.vim'
Bundle 'pangloss/vim-javascript'
Bundle 'scrooloose/nerdtree'
Bundle 'scrooloose/syntastic'
Bundle 'Shougo/neocomplcache.vim'
Bundle 'tComment'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-haml'
Bundle 'tpope/vim-markdown'
Bundle 'tpope/vim-repeat'
Bundle 'tpope/vim-surround'
" Bundle 'Valloric/YouCompleteMe'
Bundle 'VimClojure'
Bundle 'vim-ruby/vim-ruby'
Bundle 'wavded/vim-stylus'
" snippets
Bundle 'MarcWeber/vim-addon-mw-utils'
Bundle 'tomtom/tlib_vim'
Bundle 'garbas/vim-snipmate'
Bundle 'honza/vim-snippets'

" enable detection, plugins and indenting
filetype plugin indent on

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               General settings                              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" backups and swap files
set nobackup
set nowritebackup
set noswapfile

" behaviors
set autoread                  " automatically reload changes if detected
set autowrite                 " writes on make/shell commands
set hidden                    " change buffer - without saving
set history=768               " number of things to remember in history
set cf                        " enable error files & error jumping
set clipboard+=unnamed        " use the system clipboard
set timeoutlen=250            " time to wait for a command (after leader for example)
set formatoptions=crql
set iskeyword+=$,@            " add extra characters that are valid parts of variables
set nostartofline             " don't go to the start of the line after some commands
set scrolloff=3               " keep three lines below the last line when scrolling
set nofoldenable              " disable folding
set pastetoggle=<F6>          " pasting large amounts of text

" searching
set hlsearch                  " highlight all search matches
set ignorecase                " case insensitive search
set smartcase                 " pay attention to case when caps are used
set incsearch                 " show matches while typing
set gdefault                  " assume /g flag on :s searches

" visual
syntax on                     " turn on syntax highlighting
set showmatch                 " show matching brackets
set matchtime=2               " how many tenths of a second to blink
set cursorline                " highlight current line
set nolist                    " show invisible characters off
set listchars=tab:>>,trail:~,extends:#,nbsp:.,eol:$
set ruler                     " ruler on
set rulerformat=%l:%c ruler   " display current column/line in bottom right
set nonumber                  " line numbers off
set laststatus=2              " always show the statusline
set cmdheight=1               " make the command area one line high
set encoding=utf-8            " enable unicode support
set noshowmode                " don't show the mode since Powerline shows it
set title                     " set the title of the window in the terminal to the file
set statusline=%<%f\          " custom statusline
set statusline+=[%{&ff}]      " show fileformat
set statusline+=%y%m%r%=
set statusline+=%-14.(%l,%c%V%)\ %P

" indentation
set tabstop=2                 " tabs are 2 spaces
set softtabstop=2
set shiftwidth=2              " number of spaces used when indenting
set expandtab                 " always insert spaces instead of Tab
set smarttab
set autoindent
set cindent
set indentkeys-=0#            " do not break indent on #
set cinkeys-=0#
set cinoptions=:s,ps,ts,cs
set cinwords=if,else,while,do,for,switch,case
set nowrap                    " line wrapping off
set textwidth=0               " don't wrap lines by default
set backspace=indent,eol,start  " backspace over anything
set backspace=2               " delete everything with backspace

" autocompletion
set completeopt=menuone
set wildmenu                  " enable command-line tab completion
set wildmode=list:longest,full

" mouse
set mousehide                 " hide mouse after chars typed
set mouse=a                   " mouse in all modes

" sounds
set novisualbell              " no blinking
set noerrorbells              " no noise
set vb t_vb=                  " disable any beeps or flashes on error

" color, font
set background=dark

if has('gui_running')
  set t_Co=256                " tell the term has 256 colors
  set guioptions=haMR         " hide most gui elements (menu, toolbar, scrollbar)
  colorscheme Tomorrow-Night-Bright
  if has('gui_macvim')
    set guifont=Menlo:h14
  endif
else
  " dont load csapprox if there is no gui support - silences an annoying warning
  let g:CSApprox_loaded = 1
  if $TERM == 'xterm-256color' || $TERM == 'screen-256color'
    set t_Co=256              " tell the term has 256 colors
    set term=xterm-256color
    colorscheme Tomorrow-Night-Bright
  else
    colorscheme default
  endif
endif

" set up some custom colors
highlight Visual      ctermbg=3       ctermfg=0
highlight Visual      guibg=Yellow    guifg=Black
highlight Pmenu       ctermbg=9       ctermfg=15
highlight Pmenu       guibg=DarkRed   guifg=White
highlight PmenuSel    ctermbg=15      ctermfg=0
highlight PmenuSel    guibg=White     guifg=Black

" set up easymotion colors
highlight EasyMotionTarget ctermbg=NONE ctermfg=DarkRed
highlight EasyMotionTarget guibg=NONE   guifg=Red
highlight EasyMotionShade  ctermbg=NONE ctermfg=Grey
highlight EasyMotionShade  guibg=NONE   guifg=Grey

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   Mappings                                  "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

let mapleader = ','
let maplocalleader = '	'     " tab as a local leader

" map . in visual mode
vnoremap . :norm.<CR>

" clear search
nmap <silent> <C-h> :silent noh<CR>

" highlight 80+ cols
map ,8 /\%>80v.\+<CR>

" strip trailing whitespace
map <C-c> :%s/\s\+$//<CR>

" delete all trailing whitespace in current file
map <leader>w :%s/\s\+$//gce \| w<CR>

" delete all trailing whitespace for each file in repo
map <leader>W :args `git grep -lI .` \| argdo %s/\s\+$//gce \| w<CR>

" toggle invisible chars
:noremap ,i :set list!<CR>

" save as sudo
ca w!! w !sudo tee "%"

" vimrc
map <leader>v :sp ~/.vimrc<CR>
map <leader>rs :source ~/.vimrc<CR>

" silver searcher
map <leader>a :Ag!<space>

" toggle spell check with <F5>
map <F5> :setlocal spell! spelllang=en<CR>
imap <F5> <ESC>:setlocal spell! spelllang=en<CR>

" git commands
map <leader>g :Gblame<CR>
map <leader>l :!clear && git log -p %<CR>
map <leader>d :!clear && git diff %<CR>

" map markdown preview
map <leader>m :!open -a Mou %<CR><CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                   Plugins                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" easymotion
let g:EasyMotion_leader_key = '<leader><leader>'

" Indent-Guides
let g:indent_guides_guide_size = 1

" ctrlp
let g:ctrlp_map = '<leader>t'
let g:ctrlp_match_window_reversed = 0
let g:ctrlp_max_height = 20
let g:ctrlp_working_path_mode = 'ra'
nmap <leader>b :CtrlPBuffer<CR>
set wildignore+=*.swp,node_modules\*,.git\*,.gs\* " exclude from search

" seek
let g:SeekKey = '<Space>'
let g:SeekBackKey = '<U-Space>'

" closetag
let g:closetag_html_style = 1

" NERDTree
let NERDTreeIgnore = ['\.pyc$',]
map <silent> <leader>n :NERDTreeToggle<CR>
let g:NERDTreeDirArrows=0

" neocomplcache
let g:neocomplcache_enable_at_startup = 1
let g:neocomplcache_enable_smart_case = 1
let g:neocomplcache_min_syntax_length = 3

" vundle
nmap <leader>bi :BundleInstall<CR>
nmap <leader>bi! :BundleInstall!<CR>
nmap <leader>bc :BundleClean<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                                 Functions                                   "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" rename current file, via Gary Bernhardt
fun! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction
map <leader>rn :call RenameFile()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                               Automatic cmds                                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

autocmd FileType python setlocal expandtab shiftwidth=4 softtabstop=4
autocmd BufRead,BufNewFile {Gemfile,Rakefile,*.rake,config.ru} set ft=ruby

" omni completion
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
